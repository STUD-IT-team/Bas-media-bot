from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import asyncio
from typing import List, Dict, Optional
import uuid
from aiogram import Bot
from uuid import UUID

from models.notification import Notification


class NotificationScheduler:
    def __init__(self, bot: Optional[Bot]):
        self.scheduler = AsyncIOScheduler()
        self.bot = bot
        self.notifications: Dict[UUID, Notification] = {}
        # self.notifications: Dict[str, Dict] = {}  # {id: {"text": str, "time": datetime}}
        
    async def AddNotification(self, notif: Notification):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ –≤—ã–≤–æ–¥"""
        self.notifications[notif.ID] = notif
        # notification_id = str(uuid.uuid4())
        # self.notifications[notification_id] = {
        #     "chat_id": chat_id,
        #     "text": text,
        #     "time": notify_time
        # }
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        self.scheduler.add_job(
            self._sendNotification,
            'date',
            run_date=notif.NotifyTime,
            args=(notif.ID,),
            id=notif.ID.hex
        )
        
        # return notification_id
    
    async def _sendNotification(self, notification_id: UUID):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if notification_id in self.notifications:
            notification = self.notifications.pop(notification_id)
            if self.bot:
                await self.bot.send_message(
                    chat_id=notification.ChatID,
                    text=f"üîî {notification.Type.value}:\n{notification.Text}"
                )

    # async def _print_notification(self, notification_id: str):
    #     """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    #     if notification_id in self.notifications:
    #         notification = self.notifications.pop(notification_id)
    #         print(f"\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [{notification['time'].strftime('%H:%M:%S')}]:")
    #         print(notification["text"])
    #         print("-" * 40)
    
    async def Start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.start()
        print("–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        try:
            while True:
                await asyncio.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            self.scheduler.shutdown()
            print("–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    # async def cancel_notification(self, notification_id: str) -> bool:
    #     """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    #     if notification_id in self.notifications:
    #         self.scheduler.remove_job(notification_id)
    #         self.notifications.pop(notification_id)
    #         return True
    #     return False
    
    # def get_pending_notifications(self) -> List[Dict]:
    #     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    #     return [
    #         {"id": nid, **data} 
    #         for nid, data in self.notifications.items()
    #     ]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    notifier = NotificationScheduler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 5 –∏ 10 —Å–µ–∫—É–Ω–¥)
    await notifier.add_notification(
        chat_id=937944297,
        text="–ü–æ—Ä–∞ –ø–∏—Ç—å –∫–æ—Ñ–µ!",
        notify_time=datetime.now().replace(second=datetime.now().second + 5)
    )
    
    await notifier.add_notification(
        937944297,
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É",
        datetime.now().replace(second=datetime.now().second + 10)
    )
    
    print("–û–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    for n in notifier.get_pending_notifications():
        print(f" - {n['text']} –≤ {n['time'].strftime('%H:%M:%S')}")
    
    await notifier.start()

if __name__ == "__main__":
    asyncio.run(main())